generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  phone     String
  address   String?
  role      Role      @default(USER)
  firstName String
  lastName  String
  services  Service[]
  bookings  Booking[]
  cart      Cart[]
  reviews   Reviews[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  services    Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  duration    Int // Duration in minutes
  adminId     String
  categoryId  String
  slots       Slot[]
  bookings    Booking[]
  cartItem    CartItem[]
  reviews     Reviews[]
  category    Category   @relation(fields: [categoryId], references: [id])
  admin User @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Slot {
  id        String    @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  service   Service   @relation(fields: [serviceId], references: [id])
  serviceId String
  booking   Booking[]
  isBooked  Boolean   @default(false)
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Booking {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  service   Service       @relation(fields: [serviceId], references: [id])
  slotId    String
  serviceId String
  payment   Payments[]
  slot      Slot          @relation(fields: [slotId], references: [id])
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Payments {
  id        String   @id @default(uuid())
  bookingId String
  amount    Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String
  quantity  Int     @default(1)
}

model Reviews {
  id        String   @id @default(uuid())
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceId String
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
}
